// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id
  email       String      @unique
  username    String      @unique
  displayName String?
  bio         String?
  location    String?
  job         String?
  website     String?
  img         String?
  cover       String?

  // Relaciones
  posts       Post[]
  likes       Like[]
  saves       SavedPosts[]
  followers   Follow[]    @relation("UserFollowers") // Puede tener muchos seguidores
  followings  Follow[]    @relation("UserFollowings") // Puede tener muchos siguiendo
}

model Post {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  desc         String?     @db.VarChar(255)
  img          String?
  video        String?
  isSensitive  Boolean     @default(false) // Para el video

  // Relaciones
  userId       String
  user         User        @relation(fields: [userId], references: [id])

  rePostId     Int?
  rePost       Post?       @relation("RePosts", fields: [rePostId], references: [id]) // Un post puede ser una copia o republicaci√≥n de otro post
  rePosts      Post[]      @relation("RePosts") // Un post puede tener muchos reposts

  parentPostId Int?
  parentPost   Post?       @relation("PostComments", fields: [parentPostId], references: [id]) // Un post puede tener un comentario de otro post
  comments     Post[]      @relation("PostComments") // Un post puede tener muchos comentarios 

  likes        Like[]
  saves        SavedPosts[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // Relaciones
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
}

model SavedPosts {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // Relaciones
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
}

model Follow {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  
  // Relaciones
  followerId  String
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id])
  followingId String
  following   User     @relation("UserFollowings", fields: [followingId], references: [id])
}
